#
# Copyright 2008-2016 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

try:
    from sos.plugins import Plugin, RedHatPlugin
except ImportError:
    import sos.plugintools
    Plugin = RedHatPlugin = sos.plugintools.PluginBase

import json
import os
import stat
import subprocess


# This is hack for import vdsm modules. because this plugin's name was
# same with vdsm module, so it can not import vdsm modules directly. File name
# should be named as the class and we keep the name for compatability.
def _importVdsmPylibModule(fullName):
    import imp
    from distutils.sysconfig import get_python_lib
    search = get_python_lib(False)
    parts = fullName.split(".")
    fullName = ""
    for name in parts:
        if fullName:
            fullName += "."
        fullName += name
        f, path, desc = imp.find_module(name, [search])
        try:
            module = imp.load_module(fullName, f, path, desc)
        finally:
            if f:
                f.close()
        search = os.path.join(search, name)
    return module

client = _importVdsmPylibModule("vdsm.client")
utils = _importVdsmPylibModule("vdsm.utils")


class vdsm(Plugin, RedHatPlugin):
    """VDSM server related information
    """

    optionList = [("logsize", 'max size (MiB) to collect per log file', '',
                   False)]

    # Make compatible com sos version >= 3
    if not hasattr(Plugin, 'addCopySpec'):
        addCopySpec = Plugin.add_copy_spec
        # REQUIRED_FOR sosreport 3.4 replaced add_copy_spec_limit with
        # add_copy_spec
        if hasattr(Plugin, 'add_copy_spec_limit'):
            addCopySpecLimit = Plugin.add_copy_spec_limit
        else:
            addCopySpecLimit = Plugin.add_copy_spec
        collectExtOutput = Plugin.add_cmd_output
        getOption = Plugin.get_option
        addForbiddenPath = Plugin.add_forbidden_path
        addStringAsFile = Plugin.add_string_as_file

    def collectVdsmCommand(self, name, call, **kwargs):
        try:
            result = call(**kwargs)
            self.addStringAsFile(json.dumps(result), name)
        except Exception as e:
            self.addStringAsFile(str(e), name)

    def collectLVMCommand(self, name, *args):
        """
        Originally, we'd want to use collectExtOutput (Plugin.add_cmd_output);
        however, collectExtOutput accepts commands as string. This is not
        maintainable and error prone especially when the arguments are complex,
        like --config, thus we introduce our own helper.
        """
        command = list(args)
        command.insert(0, '/sbin/lvm')
        self.soslog.info("collecting cmd output %s", command)
        try:
            out = self.runCommand(command)
        except RuntimeError as e:
            self.addStringAsFile(str(e), name)
        else:
            self.addStringAsFile(out, name)

    def runCommand(self, command):
        try:
            p = subprocess.Popen(command, stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
            out, err = p.communicate()
            if p.returncode != 0:
                raise RuntimeError("Command %s failed, rc=%s, out=%r, err=%r",
                                   command, p.returncode, out, err)
            return out
        except OSError as e:
            raise RuntimeError(str(e))

    def setup(self):
        os.environ["LVM_SYSTEM_DIR"] = "@VDSMRUNDIR@/lvm"  # NOQA: E501 (potentially long line)
        self.addForbiddenPath('/etc/pki/vdsm/keys/*')
        self.addForbiddenPath('/etc/pki/vdsm/libvirt-spice/*-key.*')
        self.addForbiddenPath('/etc/pki/libvirt/private/*')

        self.collectExtOutput("service vdsmd status")
        self.addCopySpec("/tmp/vds_installer*")
        self.addCopySpec("/tmp/vds_bootstrap*")
        self.addCopySpec("/etc/vdsm/*")
        logsize = self.getOption('logsize')
        if logsize is not None:
            self.addCopySpecLimit("/var/log/vdsm/*", logsize)
        else:
            self.addCopySpec("/var/log/vdsm/*")
        self._addVdsmRunDir()
        self.addCopySpec("@HOOKSDIR@")  # NOQA: E501 (potentially long line)
        self.addCopySpec("@VDSMLIBDIR@")  # NOQA: E501 (potentially long line)
        self.addCopySpec("/var/log/ovirt.log")
        self.addCopySpec("/var/log/sanlock.log")
        p = subprocess.Popen(['/usr/bin/pgrep', 'qemu-kvm'],
                             stdout=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines():
            pid = line.strip()
            self.addCopySpec("/proc/%s/cmdline" % pid)
            self.addCopySpec("/proc/%s/status" % pid)
            self.addCopySpec("/proc/%s/mountstats" % pid)
        self.collectExtOutput("/bin/ls -l /var/log/core")
        self.collectExtOutput("/bin/ls -ldZ /etc/vdsm")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/usr/bin/tree -l @VDSMREPO@'")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/bin/ls -lR @VDSMREPO@'")
        self.collectLVMCommand(
            "lvm_vgs_-v_-o_+tags", "vgs", "-v", "-o", "+tags")
        self.collectLVMCommand(
            "lvm_lvs_-v_-o_+tags", "lvs", "-v", "-o", "+tags")
        self.collectLVMCommand(
            "lvm_pvs_-v_-o_+all", "pvs", "-v", "-o", "+all")
        self.collectExtOutput("/sbin/fdisk -l")
        self.collectExtOutput("/usr/bin/iostat")
        self.collectExtOutput("/sbin/iscsiadm -m node")
        self.collectExtOutput("/sbin/iscsiadm -m session")
        self.collectExtOutput("/usr/sbin/nodectl info")
        self.collectExtOutput("/usr/bin/abrt-cli list")

        try:
            cli = client.connect('localhost')
        except Exception as e:
            self.addStringAsFile(
                "Cannot connect to vdsm: %s" % e, "client.connect")
            return

        with utils.closing(cli):
            self.collectVdsmCommand(
                "Host.getCapabilities", cli.Host.getCapabilities)
            self.collectVdsmCommand("Host.getStats", cli.Host.getStats)
            self.collectVdsmCommand(
                "Host.getAllVmStats", cli.Host.getAllVmStats)
            self.collectVdsmCommand(
                "Host.getVMList", cli.Host.getVMList)
            self.collectVdsmCommand(
                "Host.getDeviceList", cli.Host.getDeviceList)
            self.collectVdsmCommand(
                "Host.getAllTasksInfo", cli.Host.getAllTasksInfo)
            self.collectVdsmCommand(
                "Host.getAllTasksStatuses", cli.Host.getAllTasksStatuses)

            pools_list = cli.Host.getConnectedStoragePools()
            for pool in pools_list:
                self.collectVdsmCommand(
                    "StoragePool.getSpmStatus " + pool,
                    cli.StoragePool.getSpmStatus,
                    storagepoolID=pool)

            sd_uuids = cli.Host.getStorageDomains()

        for sd_uuid in sd_uuids:
            self.collectExtOutput("vdsm-tool dump-volume-chains %s" % sd_uuid)

    def _addVdsmRunDir(self):
        """Add everything under /var/run/vdsm except possibly confidential
        sysprep vfds and sockets"""

        import glob

        for f in glob.glob("@VDSMRUNDIR@/*"):  # NOQA: E501 (potentially long line)
            if not f.endswith('.vfd') and not f.endswith('/isoUploader') \
                    and not f.endswith('/storage') \
                    and not stat.S_ISSOCK(os.stat(f).st_mode):
                self.addCopySpec(f)
