#
# Copyright 2008-2016 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

try:
    from sos.plugins import Plugin, RedHatPlugin
except ImportError:
    import sos.plugintools
    Plugin = RedHatPlugin = sos.plugintools.PluginBase

from contextlib import closing
import json
import os
import stat
import subprocess


# This is hack for import vdsm modules. because this plugin's name was
# same with vdsm module, so it can not import vdsm modules directly. File name
# should be named as the class and we keep the name for compatability.
def _importVdsmPylibModule(fullName):
    import imp
    from distutils.sysconfig import get_python_lib
    search = get_python_lib(False)
    parts = fullName.split(".")
    fullName = ""
    for name in parts:
        if fullName:
            fullName += "."
        fullName += name
        f, path, desc = imp.find_module(name, [search])
        try:
            module = imp.load_module(fullName, f, path, desc)
        finally:
            if f:
                f.close()
        search = os.path.join(search, name)
    return module

def _connectToVdsm():
    requestQueues = config.get("addresses", "request_queues")
    requestQueue = requestQueues.split(",")[0]
    return jsonrpcvdscli.connect(requestQueue=requestQueue)

config = _importVdsmPylibModule("vdsm.config").config
jsonrpcvdscli = _importVdsmPylibModule("vdsm.jsonrpcvdscli")


class vdsm(Plugin, RedHatPlugin):
    """VDSM server related information
    """

    optionList = [("logsize", 'max size (MiB) to collect per log file', '',
                   False)]

    # Make compatible com sos version >= 3
    if not hasattr(Plugin, 'addCopySpec'):
        addCopySpec = Plugin.add_copy_spec
        addCopySpecLimit = Plugin.add_copy_spec_limit
        collectExtOutput = Plugin.add_cmd_output
        getOption = Plugin.get_option
        addForbiddenPath = Plugin.add_forbidden_path
        addStringAsFile = Plugin.add_string_as_file

    def __addCopySpecLogLimit(self, path, logsize=None):
        """
        Glob the files in path and ensure that the sorted cumulative
        list of globbed files isn't larger than logsize in MiB if
        logsize is supplied.  Otherwise grab all files in path
        irrespective of their size.
        """
        if logsize is not None:
            self.addCopySpecLimit(path, logsize)
        else:
            self.addCopySpec(path)

    def addObjectAsFile(self, obj, name):
        self.addStringAsFile(json.dumps(obj), name)

    def setup(self):
        os.environ["LVM_SYSTEM_DIR"] = "@VDSMRUNDIR@/lvm"
        self.addForbiddenPath('/etc/pki/vdsm/keys/*')
        self.addForbiddenPath('/etc/pki/vdsm/libvirt-spice/*-key.*')
        self.addForbiddenPath('/etc/pki/libvirt/private/*')

        self.collectExtOutput("service vdsmd status")
        self.addCopySpec("/tmp/vds_installer*")
        self.addCopySpec("/tmp/vds_bootstrap*")
        self.addCopySpec("/etc/vdsm/*")
        self.addCopySpec("/etc/vdsm-reg/*")
        logsize = self.getOption('logsize')
        self.__addCopySpecLogLimit("/var/log/vdsm/*", logsize)
        self.__addCopySpecLogLimit("/var/log/vdsm-reg/*", logsize)
        self._addVdsmRunDir()
        self.addCopySpec("@TRUSTSTORE@")
        self.addCopySpec("@HOOKSDIR@")
        self.addCopySpec("@VDSMLIBDIR@")
        self.addCopySpec("/var/log/ovirt.log")
        self.addCopySpec("/var/log/sanlock.log")
        p = subprocess.Popen(['/usr/bin/pgrep', 'qemu-kvm'],
                             stdout=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines():
            pid = line.strip()
            self.addCopySpec("/proc/%s/cmdline" % pid)
            self.addCopySpec("/proc/%s/status" % pid)
            self.addCopySpec("/proc/%s/mountstats" % pid)
        self.collectExtOutput("/bin/ls -l /var/log/core")
        self.collectExtOutput("/bin/ls -ldZ /etc/vdsm")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/usr/bin/tree -l @VDSMREPO@'")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/bin/ls -lR @VDSMREPO@'")
        self.collectExtOutput("/sbin/lvm vgs -v -o +tags")
        self.collectExtOutput("/sbin/lvm lvs -v -o +tags")
        self.collectExtOutput("/sbin/lvm pvs -v -o +all")
        self.collectExtOutput("/sbin/fdisk -l")
        self.collectExtOutput("/usr/bin/iostat")
        self.collectExtOutput("/sbin/iscsiadm -m node")
        self.collectExtOutput("/sbin/iscsiadm -m session")

        with closing(_connectToVdsm()) as cli:
            self.addObjectAsFile(cli.getVdsCapabilities(), "getVdsCapabilities")
            self.addObjectAsFile(cli.getVdsStats(), "getVdsStats")
            self.addObjectAsFile(cli.getAllVmStats(), "getAllVmStats")
            self.addObjectAsFile(cli.list(), "list")
            self.addObjectAsFile(cli.getDeviceList(), "getDeviceList")
            self.addObjectAsFile(cli.getAllTasksInfo(), "getAllTasksInfo")
            self.addObjectAsFile(
                cli.getAllTasksStatuses(), "getAllTasksStatuses")

            if "items" in cli.getConnectedStoragePoolsList():
                pools_list = cli.getConnectedStoragePoolsList()["items"]
                for pool in pools_list:
                    self.addObjectAsFile(
                        cli.getSpmStatus(pool), "getSpmStatus " + pool)

        self.collectExtOutput(
            '/bin/su vdsm -s %s %s/dumpStorageTable.pyc' % (
                '@PYTHON@',
                '@VDSMDIR@',
            )
        )

    def _addVdsmRunDir(self):
        """Add everything under /var/run/vdsm except possibly confidential
        sysprep vfds and sockets"""

        import glob

        for f in glob.glob("@VDSMRUNDIR@/*"):
            if not f.endswith('.vfd') and not f.endswith('/isoUploader') \
                    and not f.endswith('/storage') \
                    and not stat.S_ISSOCK(os.stat(f).st_mode):
                self.addCopySpec(f)
