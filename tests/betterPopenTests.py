import os
import sys

from testrunner import VdsmTestCase as TestCaseBase

EXT_ECHO = "/bin/echo"

if __name__ != "__main__":
    # This will not be available when we use this module as a subprocess
    from vdsm.betterPopen import BetterPopen


class TestBetterPopen(TestCaseBase):
    def testEcho(self):
        data = "Hello"
        p = BetterPopen([EXT_ECHO, "-n", data])
        p.wait()
        self.assertTrue(p.returncode == 0,
                "Process failed: %s" % os.strerror(p.returncode))
        self.assertEquals(p.stdout.read(), data)

    def testCat(self):
        path = "/etc/passwd"
        p = BetterPopen(["cat", path])
        p.wait()
        self.assertTrue(p.returncode == 0,
                "Process failed: %s" % os.strerror(p.returncode))
        with open(path, "r") as f:
            self.assertEquals(p.stdout.read(), f.read())

    def _subTest(self, name, params, *args, **kwargs):
        p = BetterPopen(["python", __file__, name] + params,
                *args, **kwargs)
        p.wait()
        self.assertTrue(p.returncode == 0,
                "Process failed: %s" % os.strerror(p.returncode))
        self.assertEquals(p.stdout.read().strip(), "True")

    def testCloseFDs(self):
        fds = os.pipe()
        try:
            self._subTest("fds", [str(fds[1])], close_fds=True)
        finally:
            os.close(fds[0])
            os.close(fds[1])

    def testNoCloseFds(self):
        fds = os.pipe()
        try:
            self._subTest("nofds", [str(fds[1])], close_fds=False)
        finally:
            os.close(fds[0])
            os.close(fds[1])

    def testEnv(self):
        env = os.environ.copy()
        env["TEST"] = "True"
        self._subTest("env", [], env=env)

    def testCwd(self):
        cwd = "/proc"
        p = BetterPopen(["python", "-c", "import os; print os.getcwd()"],
                cwd=cwd)
        p.wait()
        self.assertTrue(p.returncode == 0,
                "Process failed: %s" % os.strerror(p.returncode))
        self.assertEquals(p.stdout.read().strip(), cwd)

    def testRunNonExecutable(self):
        self.assertRaises(OSError, BetterPopen, ["/tmp"])

    def testBadCwd(self):
        self.assertRaises(OSError, BetterPopen, ["echo", "hello"],
        cwd="/~~~~~dasdas~~~~")


if __name__ == "__main__":
    cmd = sys.argv[1]
    if cmd == "fds":
        try:
            os.close(int(sys.argv[2]))
            print "False"
        except:
            print "True"

    elif cmd == "nofds":
        try:
            os.close(int(sys.argv[2]))
            print "True"
        except:
            print "False"

    elif cmd == "env":
        try:
            print os.environ.get("TEST", "False")
        except:
            print "False"
