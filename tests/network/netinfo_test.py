#
# Copyright 2012-2016 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301  USA
#
# Refer to the README and COPYING files for full details of the license
#
from __future__ import absolute_import
import os
from functools import partial
import io
import netaddr

from vdsm import ipwrapper
from vdsm import netinfo
from vdsm.netinfo import addresses, bonding, dns, misc, nics, routes
from vdsm.netinfo.cache import get
from vdsm.netlink import addr as nl_addr
from vdsm.utils import random_iface_name

from .ipwrapper_test import _fakeTypeDetection
from modprobe import RequireBondingMod
from monkeypatch import MonkeyPatch, MonkeyPatchScope
from .nettestlib import dummy_device, veth_pair
from testlib import VdsmTestCase as TestCaseBase, namedTemporaryDir
from testValidation import ValidateRunningAsRoot
from testValidation import brokentest

# speeds defined in ethtool
ETHTOOL_SPEEDS = set([10, 100, 1000, 2500, 10000])


class TestNetinfo(TestCaseBase):

    def testGetHostNameservers(self):
        RESOLV_CONF = (
            '# Generated by NetworkManager\n'
            'search example.com company.net\n'
            'domain example.com\n'
            'nameserver 192.168.0.100\n'
            'nameserver 8.8.8.8\n'
            'nameserver 8.8.4.4\n'
        )
        dnss = ['192.168.0.100', '8.8.8.8', '8.8.4.4']
        with namedTemporaryDir() as temp_dir:
            file_path = os.path.join(temp_dir, 'resolv.conf')

            with MonkeyPatchScope([(dns, 'DNS_CONF_FILE', file_path)]):
                with open(file_path, 'w') as file_object:
                    file_object.write(RESOLV_CONF)

                self.assertEqual(
                    dns.get_host_nameservers(), dnss)

    def testNetmaskConversions(self):
        path = os.path.join(os.path.dirname(__file__), "netmaskconversions")
        with open(path) as netmaskFile:
            for line in netmaskFile:
                if line.startswith('#'):
                    continue
                bitmask, address = [value.strip() for value in line.split()]
                self.assertEqual(addresses.prefix2netmask(int(bitmask)),
                                 address)
        self.assertRaises(ValueError, addresses.prefix2netmask, -1)
        self.assertRaises(ValueError, addresses.prefix2netmask, 33)

    @MonkeyPatch(ipwrapper.Link, '_detectType',
                 partial(_fakeTypeDetection, ipwrapper.Link))
    def testSpeedInvalidNic(self):
        nicName = '0' * 20  # devices can't have so long names
        self.assertEqual(nics.speed(nicName), 0)

    @MonkeyPatch(ipwrapper.Link, '_detectType',
                 partial(_fakeTypeDetection, ipwrapper.Link))
    def testSpeedInRange(self):
        for d in nics.nics():
            s = nics.speed(d)
            self.assertFalse(s < 0)
            self.assertTrue(s in ETHTOOL_SPEEDS or s == 0)

    def testValidNicSpeed(self):
        values = ((0,           nics.OPERSTATE_UP, 0),
                  (-10,         nics.OPERSTATE_UP, 0),
                  (2 ** 16 - 1, nics.OPERSTATE_UP, 0),
                  (2 ** 32 - 1, nics.OPERSTATE_UP, 0),
                  (123,         nics.OPERSTATE_UP, 123),
                  ('',          nics.OPERSTATE_UP, 0),
                  ('',          'unknown',    0),
                  (123,         'unknown',    0))

        for passed, operstate, expected in values:
            with MonkeyPatchScope([(io, 'open',
                                    lambda x: io.BytesIO(str(passed))),
                                   (nics, 'operstate',
                                    lambda x: operstate)]):
                self.assertEqual(nics.speed('fake_nic'), expected)

    @MonkeyPatch(ipwrapper.Link, '_detectType',
                 partial(_fakeTypeDetection, ipwrapper.Link))
    @MonkeyPatch(netinfo, 'networks', lambda: {'fake': {'bridged': True}})
    @MonkeyPatch(bonding, '_getBondingOptions', lambda x: {})
    def testGetNonExistantBridgeInfo(self):
        # Getting info of non existing bridge should not raise an exception,
        # just log a traceback. If it raises an exception the test will fail as
        # it should.
        get()

    @MonkeyPatch(netinfo.cache, 'getLinks', lambda: [])
    @MonkeyPatch(netinfo, 'networks', lambda: {})
    def testGetEmpty(self):
        result = {}
        result.update(get())
        self.assertEqual(result['networks'], {})
        self.assertEqual(result['bridges'], {})
        self.assertEqual(result['nics'], {})
        self.assertEqual(result['bondings'], {})
        self.assertEqual(result['vlans'], {})

    def testIPv4toMapped(self):
        self.assertEqual('::ffff:127.0.0.1',
                         addresses.IPv4toMapped('127.0.0.1'))

    def testGetDeviceByIP(self):
        for addr in nl_addr.iter_addrs():
            # Link-local IPv6 addresses are generated from the MAC address,
            # which is shared between a nic and its bridge. Since We don't
            # support having the same IP address on two different NICs, and
            # link-local IPv6 addresses aren't interesting for 'getDeviceByIP'
            # then ignore them in the test
            if addr['scope'] != 'link':
                self.assertEqual(
                    addr['label'],
                    addresses.getDeviceByIP(addr['address'].split('/')[0]))

    def _testNics(self):
        """Creates a test fixture so that nics() reports:
        physical nics: em, me, me0, me1, hid0 and hideous
        dummies: fake and fake0
        bonds: jbond (over me0 and me1)"""
        return [ipwrapper.Link(address='f0:de:f1:da:aa:e7', index=2,
                               linkType=ipwrapper.LinkType.NIC, mtu=1500,
                               name='em', qdisc='pfifo_fast', state='up'),
                ipwrapper.Link(address='ff:de:f1:da:aa:e7', index=3,
                               linkType=ipwrapper.LinkType.NIC, mtu=1500,
                               name='me', qdisc='pfifo_fast', state='up'),
                ipwrapper.Link(address='ff:de:fa:da:aa:e7', index=4,
                               linkType=ipwrapper.LinkType.NIC, mtu=1500,
                               name='hid0', qdisc='pfifo_fast', state='up'),
                ipwrapper.Link(address='ff:de:11:da:aa:e7', index=5,
                               linkType=ipwrapper.LinkType.NIC, mtu=1500,
                               name='hideous', qdisc='pfifo_fast', state='up'),
                ipwrapper.Link(address='66:de:f1:da:aa:e7', index=6,
                               linkType=ipwrapper.LinkType.NIC, mtu=1500,
                               name='me0', qdisc='pfifo_fast', state='up',
                               master='jbond'),
                ipwrapper.Link(address='66:de:f1:da:aa:e7', index=7,
                               linkType=ipwrapper.LinkType.NIC, mtu=1500,
                               name='me1', qdisc='pfifo_fast', state='up',
                               master='jbond'),
                ipwrapper.Link(address='ff:aa:f1:da:aa:e7', index=34,
                               linkType=ipwrapper.LinkType.DUMMY, mtu=1500,
                               name='fake0', qdisc='pfifo_fast', state='up'),
                ipwrapper.Link(address='ff:aa:f1:da:bb:e7', index=35,
                               linkType=ipwrapper.LinkType.DUMMY, mtu=1500,
                               name='fake', qdisc='pfifo_fast', state='up'),
                ipwrapper.Link(address='66:de:f1:da:aa:e7', index=419,
                               linkType=ipwrapper.LinkType.BOND, mtu=1500,
                               name='jbond', qdisc='pfifo_fast', state='up')]

    def testNics(self):
        """
        managed by vdsm: em, me, fake0, fake1
        not managed due to hidden bond (jbond) enslavement: me0, me1
        not managed due to being hidden nics: hid0, hideous
        """
        with MonkeyPatchScope([(netinfo.misc, 'getLinks',
                                self._testNics),
                               (ipwrapper, '_bondExists',
                                lambda x: x == 'jbond'),
                               (ipwrapper.Link, '_detectType',
                                partial(_fakeTypeDetection, ipwrapper.Link)),
                               (ipwrapper.Link, '_fakeNics', ['fake*']),
                               (ipwrapper.Link, '_hiddenBonds', ['jb*']),
                               (ipwrapper.Link, '_hiddenNics', ['hid*'])
                               ]):
            self.assertEqual(set(nics.nics()),
                             set(['em', 'me', 'fake', 'fake0']))

    @ValidateRunningAsRoot
    def testFakeNics(self):
        with MonkeyPatchScope([(ipwrapper.Link, '_fakeNics', ['veth_*',
                                                              'dummy_*'])]):
            with veth_pair() as (v1a, v1b):
                with dummy_device() as d1:
                    fakes = set([d1, v1a, v1b])
                    _nics = nics.nics()
                    self.assertTrue(fakes.issubset(_nics),
                                    'Fake devices %s are not listed in nics '
                                    '%s' % (fakes, _nics))

            with veth_pair(prefix='mehv_') as (v2a, v2b):
                with dummy_device(prefix='mehd_') as d2:
                    hiddens = set([d2, v2a, v2b])
                    _nics = nics.nics()
                    self.assertFalse(hiddens.intersection(_nics), 'Some of '
                                     'hidden devices %s is shown in nics %s' %
                                     (hiddens, _nics))

    def testGetIfaceCfg(self):
        deviceName = "___This_could_never_be_a_device_name___"
        ifcfg = ('GATEWAY0=1.1.1.1\n' 'NETMASK=255.255.0.0\n')
        with namedTemporaryDir() as tempDir:
            ifcfgPrefix = os.path.join(tempDir, 'ifcfg-')
            filePath = ifcfgPrefix + deviceName

            with MonkeyPatchScope([(misc, 'NET_CONF_PREF', ifcfgPrefix)]):
                with open(filePath, 'w') as ifcfgFile:
                    ifcfgFile.write(ifcfg)
                self.assertEqual(
                    misc.getIfaceCfg(deviceName)['GATEWAY'], '1.1.1.1')
                self.assertEqual(
                    misc.getIfaceCfg(deviceName)['NETMASK'], '255.255.0.0')

    @brokentest("Skipped becasue it breaks randomly on the CI")
    @MonkeyPatch(bonding, 'BONDING_DEFAULTS', bonding.BONDING_DEFAULTS
                 if os.path.exists(bonding.BONDING_DEFAULTS)
                 else '../vdsm/bonding-defaults.json')
    @ValidateRunningAsRoot
    @RequireBondingMod
    def testGetBondingOptions(self):
        INTERVAL = '12345'
        bondName = random_iface_name()

        with open(bonding.BONDING_MASTERS, 'w') as bonds:
            bonds.write('+' + bondName)
            bonds.flush()

            try:  # no error is anticipated but let's make sure we can clean up
                self.assertEqual(
                    bonding._getBondingOptions(bondName), {}, "This test fails"
                    " when a new bonding option is added to the kernel. Please"
                    " run vdsm-tool dump-bonding-options` and retest.")

                with open(bonding.BONDING_OPT % (bondName, 'miimon'),
                          'w') as opt:
                    opt.write(INTERVAL)

                self.assertEqual(bonding._getBondingOptions(bondName),
                                 {'miimon': INTERVAL})

            finally:
                bonds.write('-' + bondName)

    @MonkeyPatch(bonding, 'BONDING_NAME2NUMERIC_PATH',
                 bonding.BONDING_NAME2NUMERIC_PATH
                 if os.path.exists(bonding.BONDING_NAME2NUMERIC_PATH)
                 else '../vdsm/bonding-name2numeric.json')
    def test_get_bonding_option_numeric_val_exists(self):
        mode_num = bonding.BONDING_MODES_NAME_TO_NUMBER["balance-rr"]
        self.assertNotEqual(bonding.get_bonding_option_numeric_val(
                            mode_num, "ad_select", "stable"),
                            None)

    @MonkeyPatch(bonding, 'BONDING_NAME2NUMERIC_PATH',
                 bonding.BONDING_NAME2NUMERIC_PATH
                 if os.path.exists(bonding.BONDING_NAME2NUMERIC_PATH)
                 else '../vdsm/bonding-name2numeric.json')
    def test_get_bonding_option_numeric_val_does_not_exists(self):
        mode_num = bonding.BONDING_MODES_NAME_TO_NUMBER["balance-rr"]
        self.assertEqual(bonding.get_bonding_option_numeric_val(
                         mode_num, "opt_does_not_exist", "none"),
                         None)

    def test_get_gateway(self):
        TEST_IFACE = 'test_iface'
        # different tables but the gateway is the same so it should be reported
        DUPLICATED_GATEWAY = {TEST_IFACE: [
            {
                'destination': 'none',
                'family': 'inet',
                'gateway': '12.34.56.1',
                'oif': TEST_IFACE,
                'oif_index': 8,
                'scope': 'global',
                'source': None,
                'table': 203569230,  # lucky us, we got the address 12.34.56.78
            }, {
                'destination': 'none',
                'family': 'inet',
                'gateway': '12.34.56.1',
                'oif': TEST_IFACE,
                'oif_index': 8,
                'scope': 'global',
                'source': None,
                'table': 254,
            }]}
        SINGLE_GATEWAY = {TEST_IFACE: [DUPLICATED_GATEWAY[TEST_IFACE][0]]}

        gateway = routes.get_gateway(SINGLE_GATEWAY, TEST_IFACE)
        self.assertEqual(gateway, '12.34.56.1')
        gateway = routes.get_gateway(DUPLICATED_GATEWAY, TEST_IFACE)
        self.assertEqual(gateway, '12.34.56.1')

    @ValidateRunningAsRoot
    def test_ip_info(self):
        def get_ip_info(*a, **kw):
            """filter away ipv6 link local addresses that may or may not exist
            on the device depending on OS configuration"""
            ipv4addr, ipv4netmask, ipv4addrs, ipv6addrs = \
                addresses.getIpInfo(*a, **kw)
            ipv6addrs = [
                addr for addr in ipv6addrs
                if not netaddr.IPAddress(addr.split('/')[0]).is_link_local()]
            return ipv4addr, ipv4netmask, ipv4addrs, ipv6addrs

        IP_ADDR = '192.0.2.2'
        IP_ADDR_SECOND = '192.0.2.3'
        IP_ADDR_GW = '192.0.2.1'
        IP_ADDR2 = '198.51.100.9'
        IP_ADDR3 = '198.51.100.11'
        IP_ADDR2_GW = '198.51.100.1'
        IPV6_ADDR = '2607:f0d0:1002:51::4'
        NET_MASK = '255.255.255.0'
        PREFIX_LENGTH = 24
        IPV6_PREFIX_LENGTH = 64
        IP_ADDR_CIDR = self._cidr_form(IP_ADDR, PREFIX_LENGTH)
        IP_ADDR_SECOND_CIDR = self._cidr_form(IP_ADDR_SECOND, PREFIX_LENGTH)
        IP_ADDR2_CIDR = self._cidr_form(IP_ADDR2, PREFIX_LENGTH)
        IP_ADDR3_CIDR = self._cidr_form(IP_ADDR3, 32)
        IPV6_ADDR_CIDR = self._cidr_form(IPV6_ADDR, IPV6_PREFIX_LENGTH)
        with dummy_device() as device:
            ipwrapper.addrAdd(device, IP_ADDR, PREFIX_LENGTH)
            ipwrapper.addrAdd(device, IP_ADDR_SECOND, PREFIX_LENGTH)
            ipwrapper.addrAdd(device, IP_ADDR2, PREFIX_LENGTH)
            ipwrapper.addrAdd(device, IPV6_ADDR, IPV6_PREFIX_LENGTH, family=6)
            # 32 bit addresses are reported slashless by netlink
            ipwrapper.addrAdd(device, IP_ADDR3, 32)
            self.assertEqual(
                get_ip_info(device),
                (IP_ADDR, NET_MASK,
                 [IP_ADDR_CIDR, IP_ADDR2_CIDR, IP_ADDR3_CIDR,
                  IP_ADDR_SECOND_CIDR],
                 [IPV6_ADDR_CIDR]))
            self.assertEqual(
                get_ip_info(device, ipv4_gateway=IP_ADDR_GW),
                (IP_ADDR, NET_MASK,
                 [IP_ADDR_CIDR, IP_ADDR2_CIDR, IP_ADDR3_CIDR,
                  IP_ADDR_SECOND_CIDR],
                 [IPV6_ADDR_CIDR]))
            self.assertEqual(
                get_ip_info(device, ipv4_gateway=IP_ADDR2_GW),
                (IP_ADDR2, NET_MASK,
                 [IP_ADDR_CIDR, IP_ADDR2_CIDR, IP_ADDR3_CIDR,
                  IP_ADDR_SECOND_CIDR],
                 [IPV6_ADDR_CIDR]))

    def _cidr_form(self, ip_addr, prefix_length):
        return '{}/{}'.format(ip_addr, prefix_length)
