#!/usr/bin/python2
#
# Copyright 2018-2019 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#
"""
This helper provides a wrapper to os_brick module, exposing
the commands needed for getting the Host connector information, attach
and detach a volume.

The available commands are:
 - "connector_info" - returns the connector information of the host
"""

from __future__ import absolute_import
from __future__ import division

import argparse
import json
import sys

from os_brick.initiator import connector


class UsageError(Exception):
    """ Raised when usage is wrong """


def main(args):
    parser = argparse.ArgumentParser(description="Vdsm connector helper")
    subparsers = parser.add_subparsers(title="commands")
    info = subparsers.add_parser(
        "connector_info",
        help="Get Connector info. Returns connector info")
    info.set_defaults(command=connector_info)

    args = parser.parse_args()

    args.command(args)


def connector_info(args):
    con = connector.get_connector_properties(
                        root_helper=None,
                        my_ip=None,
                        multipath=True,
                        enforce_multipath=True)
    write(con)


def write(obj):
    sys.stdout.write(json.dumps(obj))
    sys.stdout.write('\n')
    sys.stdout.flush()


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
